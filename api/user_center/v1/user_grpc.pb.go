// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: user_center/v1/user.proto

package user_centerv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	UserCenterService_Query_FullMethodName    = "/user_center.v1.UserCenterService/Query"
	UserCenterService_GetByIds_FullMethodName = "/user_center.v1.UserCenterService/GetByIds"
)

// UserCenterServiceClient is the client API for UserCenterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserCenterServiceClient interface {
	// Sends a greeting
	Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryResponse, error)
	GetByIds(ctx context.Context, in *GetByIdsRequest, opts ...grpc.CallOption) (*GetByIdsResponse, error)
}

type userCenterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserCenterServiceClient(cc grpc.ClientConnInterface) UserCenterServiceClient {
	return &userCenterServiceClient{cc}
}

func (c *userCenterServiceClient) Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryResponse, error) {
	out := new(QueryResponse)
	err := c.cc.Invoke(ctx, UserCenterService_Query_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCenterServiceClient) GetByIds(ctx context.Context, in *GetByIdsRequest, opts ...grpc.CallOption) (*GetByIdsResponse, error) {
	out := new(GetByIdsResponse)
	err := c.cc.Invoke(ctx, UserCenterService_GetByIds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserCenterServiceServer is the server API for UserCenterService service.
// All implementations must embed UnimplementedUserCenterServiceServer
// for forward compatibility
type UserCenterServiceServer interface {
	// Sends a greeting
	Query(context.Context, *QueryRequest) (*QueryResponse, error)
	GetByIds(context.Context, *GetByIdsRequest) (*GetByIdsResponse, error)
	mustEmbedUnimplementedUserCenterServiceServer()
}

// UnimplementedUserCenterServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserCenterServiceServer struct {
}

func (UnimplementedUserCenterServiceServer) Query(context.Context, *QueryRequest) (*QueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Query not implemented")
}
func (UnimplementedUserCenterServiceServer) GetByIds(context.Context, *GetByIdsRequest) (*GetByIdsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByIds not implemented")
}
func (UnimplementedUserCenterServiceServer) mustEmbedUnimplementedUserCenterServiceServer() {}

// UnsafeUserCenterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserCenterServiceServer will
// result in compilation errors.
type UnsafeUserCenterServiceServer interface {
	mustEmbedUnimplementedUserCenterServiceServer()
}

func RegisterUserCenterServiceServer(s grpc.ServiceRegistrar, srv UserCenterServiceServer) {
	s.RegisterService(&UserCenterService_ServiceDesc, srv)
}

func _UserCenterService_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCenterServiceServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserCenterService_Query_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCenterServiceServer).Query(ctx, req.(*QueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCenterService_GetByIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCenterServiceServer).GetByIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserCenterService_GetByIds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCenterServiceServer).GetByIds(ctx, req.(*GetByIdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserCenterService_ServiceDesc is the grpc.ServiceDesc for UserCenterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserCenterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user_center.v1.UserCenterService",
	HandlerType: (*UserCenterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Query",
			Handler:    _UserCenterService_Query_Handler,
		},
		{
			MethodName: "GetByIds",
			Handler:    _UserCenterService_GetByIds_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user_center/v1/user.proto",
}
