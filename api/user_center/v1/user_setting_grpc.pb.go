// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: user_center/v1/user_setting.proto

package user_centerv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	UserSettingService_GetUserSettingByUserId_FullMethodName = "/user_center.v1.UserSettingService/GetUserSettingByUserId"
)

// UserSettingServiceClient is the client API for UserSettingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserSettingServiceClient interface {
	GetUserSettingByUserId(ctx context.Context, in *GetUserSettingByUserIdRequest, opts ...grpc.CallOption) (*GetUserSettingByUserIdResponse, error)
}

type userSettingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserSettingServiceClient(cc grpc.ClientConnInterface) UserSettingServiceClient {
	return &userSettingServiceClient{cc}
}

func (c *userSettingServiceClient) GetUserSettingByUserId(ctx context.Context, in *GetUserSettingByUserIdRequest, opts ...grpc.CallOption) (*GetUserSettingByUserIdResponse, error) {
	out := new(GetUserSettingByUserIdResponse)
	err := c.cc.Invoke(ctx, UserSettingService_GetUserSettingByUserId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserSettingServiceServer is the server API for UserSettingService service.
// All implementations must embed UnimplementedUserSettingServiceServer
// for forward compatibility
type UserSettingServiceServer interface {
	GetUserSettingByUserId(context.Context, *GetUserSettingByUserIdRequest) (*GetUserSettingByUserIdResponse, error)
	mustEmbedUnimplementedUserSettingServiceServer()
}

// UnimplementedUserSettingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserSettingServiceServer struct {
}

func (UnimplementedUserSettingServiceServer) GetUserSettingByUserId(context.Context, *GetUserSettingByUserIdRequest) (*GetUserSettingByUserIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserSettingByUserId not implemented")
}
func (UnimplementedUserSettingServiceServer) mustEmbedUnimplementedUserSettingServiceServer() {}

// UnsafeUserSettingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserSettingServiceServer will
// result in compilation errors.
type UnsafeUserSettingServiceServer interface {
	mustEmbedUnimplementedUserSettingServiceServer()
}

func RegisterUserSettingServiceServer(s grpc.ServiceRegistrar, srv UserSettingServiceServer) {
	s.RegisterService(&UserSettingService_ServiceDesc, srv)
}

func _UserSettingService_GetUserSettingByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserSettingByUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserSettingServiceServer).GetUserSettingByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserSettingService_GetUserSettingByUserId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserSettingServiceServer).GetUserSettingByUserId(ctx, req.(*GetUserSettingByUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserSettingService_ServiceDesc is the grpc.ServiceDesc for UserSettingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserSettingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user_center.v1.UserSettingService",
	HandlerType: (*UserSettingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserSettingByUserId",
			Handler:    _UserSettingService_GetUserSettingByUserId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user_center/v1/user_setting.proto",
}
